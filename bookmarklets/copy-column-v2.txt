(async function(w, d) {

function createUnique()
{
	/* return  '_' + Math.random().toString(32).substring(2); */
	return Symbol();
}

const target = createUnique();
const startCustomSelect = createUnique();
const getSelectedData = createUnique();

const DATAATTR = {
	N : 'selection',
	V : 'disabled'
};

const STR = (obj => {
	let ret = {};
	for (name in obj) {
		ret[name] = String.fromCharCode(obj[name]);
	}
	return ret;
})({
	TAB : 9,
	LF : 10,
	SP : 32
});

d.getElementsByTagName('*').item(0).appendChild(d.createElement('STYLE'));
let attrsel = '[data-' + DATAATTR.N + '="' + DATAATTR.V + '"]';
let style =
	'TH' + attrsel +
	'::selection,' +
	'TH' + attrsel + STR.SP + '*' +
	'::selection,' +
	'TD' + attrsel +
	'::selection,' +
	'TD' + attrsel + STR.SP + '*' +
	'::selection' +
	'{background-color: transparent !important;}';
d.styleSheets[d.styleSheets.length - 1].insertRule(style);

function forceRedraw(in_elem)
{
	let stored = in_elem.style.opacity;
	in_elem.style.opacity = Number.parseFloat(w.getComputedStyle(in_elem).opacity) * 0.99;
	window.setTimeout(() => {
		in_elem.style.opacity = stored;
	}, 0);
}

function funcNodeIsElem(...in_nodeNames)
{
	return function(in_node) {
		if (in_node.nodeType === Node.ELEMENT_NODE) {
			for (let nodeName of in_nodeNames) {
				if (in_node.nodeName.toUpperCase() === nodeName) {
					return true;
				}
			}
		}
		return false;
	};
}

HTMLTableElement.prototype[startCustomSelect] = function() {
	if (this[target]) {
		return;
	}
	this[target] = {};
	this[target].rect = {
		T : Number.POSITIVE_INFINITY,
		L : Number.POSITIVE_INFINITY,
		B : Number.NEGATIVE_INFINITY,
		R : Number.NEGATIVE_INFINITY
	};
	this[target].updateRect = (function(in_el) {
		let updated = false;
		if (this[target].rect.T > in_el.offsetTop) {
			this[target].rect.T = in_el.offsetTop;
			updated = true;
		}
		if (this[target].rect.L > in_el.offsetLeft) {
			this[target].rect.L = in_el.offsetLeft;
			updated = true;
		}
		if (this[target].rect.B < in_el.offsetTop + in_el.offsetHeight) {
			this[target].rect.B = in_el.offsetTop + in_el.offsetHeight
			updated = true;
		}
		if (this[target].rect.R < in_el.offsetLeft + in_el.offsetWidth) {
			this[target].rect.R = in_el.offsetLeft + in_el.offsetWidth;
			updated = true;
		}
		return updated;
	}).bind(this);
	this[target].inRect = (function(in_el) {
		if (this[target].rect.T > in_el.offsetTop) {
			return false;
		}
		if (this[target].rect.L > in_el.offsetLeft) {
			return false;
		}
		if (this[target].rect.B < in_el.offsetTop + in_el.offsetHeight) {
			return false;
		}
		if (this[target].rect.R < in_el.offsetLeft + in_el.offsetWidth) {
			return false;
		}
		return true;
	}).bind(this);
	this[target].updateDataset = (function() {
		for (let j = 0; j < this.rows.length; j++) {
			let row = this.rows.item(j);
			for (let i = 0; i < row.cells.length; i++) {
				let cell = row.cells.item(i);
				if (!cell.dataset[DATAATTR.N]) {
					continue;
				}
				if (this[target].inRect(cell)) {
					console.log('added target (' + j + ', ' + i + ')');
					delete cell.dataset[DATAATTR.N];
				}
			}
		}
	}).bind(this);
	this[target].handleMouseMove = (function(ev) {
		const right_button = 1;
		if (ev.buttons != right_button) {
			console.log('without right button');
			return;
		}
		if (!(funcNodeIsElem('TH', 'TD'))(ev.target)) {
			console.log('not TH/TD');
			return;
		}
		if (ev.target.dataset[DATAATTR.N] === DATAATTR.V) {
			if (this[target].updateRect(ev.target)) {
				this[target].updateDataset();
			}
		}
	}).bind(this);
	this[target].handleMouseLeave = (function(ev) {
		const right_button = 1;
		if (ev.buttons != right_button) {
			/* for my favorite ux :-p */
			w.getSelection().getRangeAt(0).collapse();
		}
		Array.prototype.slice.call(this.querySelectorAll('TH, TD')).forEach(cell => {
			delete cell.dataset[DATAATTR.N];
		});
		if (w.navigator.userAgent.toLowerCase().indexOf('firefox') !== -1) {
			console.log('use trick for Firefox');
			forceRedraw(this);
		}
		this.removeEventListener('mousemove', this[target].handleMouseMove);
		this.removeEventListener('mouseleave', this[target].handleMouseLeave);
		console.log('stopped');
		delete this[target];
	}).bind(this);
	this.addEventListener('mousemove', this[target].handleMouseMove);
	this.addEventListener('mouseleave', this[target].handleMouseLeave);
	/* all clear when restart */
	Array.prototype.slice.call(this.querySelectorAll('TH, TD')).forEach(cell => {
		cell.dataset[DATAATTR.N] = DATAATTR.V;
	});
	console.log('started');
};

HTMLTableElement.prototype[getSelectedData] = function() {
	let rows = [];
	if (!this[target]) {
		return rows;
	}
	let range = w.getSelection().getRangeAt(0);
	let s_cell = range.startContainer.parentElement.closest('TH, TD');
	let e_cell = range.endContainer.parentElement.closest('TH, TD');
	let _index = function(in_cell) {
		try {
			return [in_cell.parentNode.rowIndex, in_cell.cellIndex];
		} catch(err) {
			return [-1, -1];
		}
	};
	console.log('range : (' + _index(s_cell).join(',') + ') - (' + _index(e_cell).join(',') + ')');
	let _in_range = false;
	let _cur_rowIndex = -1;
	Array.prototype.slice.call(this.querySelectorAll('TH, TD')).forEach(cell => {
		let _new_rowIndex = cell.closest('TR').rowIndex;
		if (_new_rowIndex > _cur_rowIndex) {
			_cur_rowIndex = _new_rowIndex;
			rows[_cur_rowIndex] = [];
		}
		if (_in_range) {
			if (cell === e_cell) {
				rows[_cur_rowIndex].push(e_cell.innerText.substring(0, range.endOffset));
				_in_range = false;
			} else {
				if (!cell.dataset[DATAATTR.N]) {
					rows[_cur_rowIndex].push(cell.innerText);
				}
			}
		} else {
			if (cell === s_cell) {
				rows[_cur_rowIndex].push(s_cell.innerText.substring(range.startOffset));
				_in_range = true;
			}
		}
	});
	/* remove empty */
	return rows.filter(row => {return row;});
};

d.addEventListener('selectstart', ev => {
	let table = ev.composedPath().find(funcNodeIsElem('TABLE'));
	if (!table) {
		/* not in table */
		return;
	}
	if (table.getElementsByTagName('TABLE').length > 0) {
		/* target should be inner table */
		return;
	}
	table[startCustomSelect]();
});

d.addEventListener('copy', ev => {
	let rows = [];
	Array.prototype.slice.call(d.getElementsByTagName('TABLE')).forEach(tbl => {
		rows = rows.concat(tbl[getSelectedData]());
	});
	if (rows.length > 0) {
		for (let i = 0; i < rows.length; i++) {
			rows[i] = rows[i].join(STR.TAB);
		}
		(async (in_text) => {
			await navigator.clipboard.writeText(in_text);
		})(rows.join(STR.LF));
	}
});

})(window, document);
