(function(d) {

const DATTR = {
	N : 'selection',
	V : 'disabled'
};

if (d.styleSheets.length > 0) {
	let selector = 'TD[data-' + DATTR.N + '="' + DATTR.V + '"]::selection ';
	let style = '{background-color: transparent;}';
	d.styleSheets[0].insertRule(selector + style);
}

async function copyToClipboard(text)
{
	await navigator.clipboard.writeText(text);
}

function funcNodeIsElem(in_nodeName)
{
	return function(in_node) {
		if (in_node.nodeType === Node.ELEMENT_NODE) {
			if (in_node.nodeName.toUpperCase() === in_nodeName) {
				return true;
			}
		}
		return false;
	};
}

HTMLTableElement.prototype.startCustomSelect = function() {
	if (!this._exData) {
		this._exData = {};
		this._exData.handleMouseMove = (function(ev) {
			if ((funcNodeIsElem('TD'))(ev.target)) {
				delete ev.target.dataset[DATTR.N];
				console.log('added target');
			}
		}).bind(this);
		this._exData.handleMouseLeave = (function(ev) {
			Array.prototype.slice.call(this.getElementsByTagName('TD')).forEach(td => {
				delete td.dataset[DATTR.N];
			});
			this.removeEventListener('mousemove', this._exData.handleMouseMove);
			this.removeEventListener('mouseleave', this._exData.handleMouseLeave);
			this._exData.started = false;
			console.log('stopped');
		}).bind(this);
		this._exData.started = false;
	}
	if (!this._exData.started) {
		this.addEventListener('mousemove', this._exData.handleMouseMove);
		this.addEventListener('mouseleave', this._exData.handleMouseLeave);
	}
	/* all clear when restart */
	Array.prototype.slice.call(this.getElementsByTagName('TD')).forEach(td => {
		td.dataset[DATTR.N] = DATTR.V;
	});
	this._exData.started = true;
	console.log('started');
};

HTMLTableElement.prototype.getSelectedData = function() {
	if (!this._exData || !this._exData.started) {
		return;
	}
	let range = window.getSelection().getRangeAt(0);
	let start = range.startContainer.parentElement.closest('TD');
	let end = range.endContainer.parentElement.closest('TD');
	let buff = [];
	let inRange = false;
	Array.prototype.slice.call(this.getElementsByTagName('TD')).forEach(td => {
		if (inRange) {
			if (td.isEqualNode(end)) {
				buff.push(end.innerText.substring(0, range.endOffset));
				inRange = false;
			} else {
				if (td.dataset[DATTR.N] !== DATTR.V) {
					buff.push(td.innerText);
				}
			}
		} else {
			if (td.isEqualNode(start)) {
				buff.push(start.innerText.substring(range.startOffset));
				inRange = true;
			}
		}
	});
	return buff;
};

d.addEventListener('selectstart', ev => {
	let td = ev.composedPath().find(funcNodeIsElem('TD'));
	if (td) {
		td.closest('TABLE').startCustomSelect();
	}
});

d.addEventListener('copy', ev => {
	Array.prototype.slice.call(d.getElementsByTagName('TABLE')).forEach(tbl => {
		let buff = tbl.getSelectedData();
		if (buff.length > 0) {
			/* once ? */
			copyToClipboard(buff.join("\n"));
		}
	});
});

})(document);
