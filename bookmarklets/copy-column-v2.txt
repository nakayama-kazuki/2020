// ==ClosureCompiler==
// @output_file_name copy-column-v2.js
// @compilation_level SIMPLE_OPTIMIZATIONS
// @language_out ECMASCRIPT_2017
// ==/ClosureCompiler==

(async function() {

const allCells = Symbol();
const getSelectedData = Symbol();

const STR = (obj => {
	let ret = {};
	for (name in obj) {
		ret[name] = String.fromCharCode(obj[name]);
	}
	return ret;
})({
	TAB : 9,
	LF : 10,
	SP : 32
});

function createUniqueString()
{
	return  'x' + Math.random().toString(32).substring(2);
}

function forceRedraw(in_elem)
{
	let stored = in_elem.style.opacity;
	in_elem.style.opacity = Number.parseFloat(window.getComputedStyle(in_elem).opacity) * 0.99;
	window.setTimeout(() => {
		in_elem.style.opacity = stored;
	}, 0);
}

function isFirefox()
{
	return (window.navigator.userAgent.toLowerCase().indexOf('firefox') !== -1);
}

function isElemNode(in_nodeName)
{
	return function(in_node) {
		if (in_node.nodeType === Node.ELEMENT_NODE) {
			if (in_node.nodeName.toUpperCase() === in_nodeName.toUpperCase()) {
				return true;
			}
		}
		return false;
	};
}

function collapseSelection()
{
	let selection = window.getSelection();
	for (let i = 0; i < selection.rangeCount; i++) {
		selection.getRangeAt(i).collapse();
	}
}

/*
	At this moment, ClosureCompiler doesn't support private fields.
	So, after supporting, replace '__' to '#'.
	In addition, public class fields seem to be required to be defined in constructor.
	ClosureCompiler said "This language feature is only supported for UNSTABLE mode or better".
	So, this also may be fixed in future.
*/

class selectionController {
	constructor(...in_nodeNames) {
		this.__nodeNames = [];
		in_nodeNames.forEach(nodeName => {
			this.__nodeNames.push(nodeName);
		});
		this.__attrName = createUniqueString();
		this.__attrValue = createUniqueString();
	}
	__attrSelector() {
		return '[data-' + this.__attrName + '="' + this.__attrValue + '"]';
	}
	createStyle() {
		let buff = [];
		this.__nodeNames.forEach(nodeName => {
			buff.push(nodeName + this.__attrSelector() + '::selection');
			// descendant selector
			buff.push(nodeName + this.__attrSelector() + STR.SP + '*' + '::selection');
		});
		return buff.join(',') + '{background-color: transparent !important;}';
	}
	disable(in_elem) {
		if (this.isDisabled(in_elem)) {
			return;
		}
		in_elem.dataset[this.__attrName] = this.__attrValue;
	}
	isDisabled(in_elem) {
		return (in_elem.dataset[this.__attrName] === this.__attrValue);
	}
	enable(in_elem) {
		if (this.isEnabled(in_elem)) {
			return;
		}
		delete in_elem.dataset[this.__attrName];
	}
	isEnabled(in_elem) {
		return !(in_elem.dataset[this.__attrName]);
	}
}

HTMLTableElement.prototype[allCells] = function(in_callback) {
	Array.from(this.rows).forEach(in_row => {
		Array.from(in_row.cells).forEach(in_cell => {
			(in_callback)(in_cell);
		});
	});
}

class tableSelectionController extends selectionController {
	constructor() {
		let nodeNames = ['TD', 'TH'];
		super(...nodeNames);
		this.__nodeNames = nodeNames;
		this.__cache = null;
	}
	get __table() {
		return this.__cache.startCell.closest('TABLE');
	}
	__calcBoundRect() {
		let r = {};
		let s = this.__cache.startCell;
		let c = this.__cache.currentCell;
		r.offsetLeft = Math.min(s.offsetLeft, c.offsetLeft);
		r.offsetTop = Math.min(s.offsetTop, c.offsetTop);
		r.offsetWidth = Math.max(s.offsetLeft + s.offsetWidth, c.offsetLeft + c.offsetWidth) - r.offsetLeft;
		r.offsetHeight = Math.max(s.offsetTop + s.offsetHeight, c.offsetTop + c.offsetHeight) - r.offsetTop;
		return r;
	}
	__inRect(in_rect, in_cell) {
		if (in_rect.offsetLeft > in_cell.offsetLeft) {
			return false;
		}
		if (in_rect.offsetTop > in_cell.offsetTop) {
			return false;
		}
		if (in_rect.offsetLeft + in_rect.offsetWidth < in_cell.offsetLeft + in_cell.offsetWidth) {
			return false;
		}
		if (in_rect.offsetTop + in_rect.offsetHeight < in_cell.offsetTop + in_cell.offsetHeight) {
			return false;
		}
		return true;
	}
	__update_1() {
		// enable only 1 cell ( = startCell )
		this.__table[allCells](cell => {
			this.disable(cell);
		});
		this.enable(this.__cache.startCell);
		if (isFirefox()) {
			forceRedraw(this.__table);
		}
	}
	__update_2() {
		// enable cells in boundRect
		let boundRect = this.__calcBoundRect();
		this.__table[allCells](cell => {
			if (this.__inRect(boundRect, cell)) {
				this.enable(cell);
			} else {
				this.disable(cell);
			}
		});
		this.enable(this.__cache.startCell);
		if (isFirefox()) {
			forceRedraw(this.__table);
		}
	}
	__inSameTable(in_cell) {
		return (this.__table === in_cell.closest('TABLE'));
	}
	stop() {
		if (!this.__cache) {
			return;
		}
		// enable all cells ( = initialize )
		this.__table[allCells](cell => {
			this.enable(cell);
		});
		this.enable(this.__cache.startCell);
		if (isFirefox()) {
			forceRedraw(this.__table);
		}
		this.__cache = null;
	}
	update(in_elem) {
		let isCell = false;
		for (let i = 0; i < this.__nodeNames.length; i++) {
			if (isElemNode(this.__nodeNames[i])(in_elem)) {
				isCell = true;
				break;
			}
		}
		if (!isCell) {
			return;
		}
		if (this.__cache) {
			if (this.__cache.currentCell === in_elem) {
				// don't need to update
				return;
			}
			if (this.__inSameTable(in_elem)) {
				this.__cache.currentCell = in_elem;
				this.__update_2();
			} else {
				this.stop();
				this.update(in_elem);
				console.log(' !! move to other table');
			}
		} else {
			this.__cache = {
				startCell : in_elem,
				currentCell : in_elem
			};
			this.__update_1();
		}
	}
	updating() {
		return !!this.__cache;
	}
}

const gSelection = new tableSelectionController();

(d => {
	d.getElementsByTagName('*').item(0).appendChild(d.createElement('STYLE'));
	d.styleSheets[d.styleSheets.length - 1].insertRule(gSelection.createStyle());
})(document);

HTMLTableElement.prototype[getSelectedData] = function() {
	let rows = [];
	if (!gSelection.updating()) {
		return rows;
	}
	let range = window.getSelection().getRangeAt(0);
	let s_cell = range.startContainer.parentElement.closest('TH, TD');
	let e_cell = range.endContainer.parentElement.closest('TH, TD');
	let _index = function(in_cell) {
		try {
			return [in_cell.parentNode.rowIndex, in_cell.cellIndex];
		} catch(err) {
			return [-1, -1];
		}
	};
	console.log('range : (' + _index(s_cell).join(',') + ') - (' + _index(e_cell).join(',') + ')');
	let _in_range = false;
	let _cur_rowIndex = -1;
	Array.prototype.slice.call(this.querySelectorAll('TH, TD')).forEach(cell => {
		let _new_rowIndex = cell.closest('TR').rowIndex;
		if (_new_rowIndex > _cur_rowIndex) {
			_cur_rowIndex = _new_rowIndex;
			rows[_cur_rowIndex] = [];
		}
		if (_in_range) {
			if (cell === e_cell) {
				rows[_cur_rowIndex].push(e_cell.innerText.substring(0, range.endOffset));
				_in_range = false;
			} else {
				if (gSelection.isEnabled(cell)) {
					rows[_cur_rowIndex].push(cell.innerText);
				}
			}
		} else {
			if (cell === s_cell) {
				rows[_cur_rowIndex].push(s_cell.innerText.substring(range.startOffset));
				_in_range = true;
			}
		}
	});
	// remove empty
	return rows.filter(row => {return row;});
};

const RIGHT_BUTTON = 1;

function handleMouseMove(in_ev)
{
	if (in_ev.buttons != RIGHT_BUTTON) {
		return;
	}
	gSelection.update(in_ev.target);
}

function handleMouseDown(in_ev)
{
	collapseSelection();
	gSelection.stop();
}

function handleMouseLeave(in_ev)
{
	let table = in_ev.target;
	if (!isElemNode('TABLE')(table)) {
		console.log('!! something wrong');
		return;
	}
	if (in_ev.buttons != RIGHT_BUTTON) {
		// why checking before collapse : my favorite ux
		collapseSelection();
	}
	gSelection.stop();
	table.removeEventListener('mousemove', handleMouseMove);
	table.removeEventListener('mousedown', handleMouseDown);
	table.removeEventListener('mouseleave', handleMouseLeave);
	console.log('selection stopped');
}

document.addEventListener('selectstart', ev => {
	let table = ev.composedPath().find(isElemNode('TABLE'));
	if (!table) {
		// not in table
		return;
	}
	if (table.getElementsByTagName('TABLE').length > 0) {
		// target should be inner table
		return;
	}
	table.addEventListener('mousemove', handleMouseMove);
	table.addEventListener('mousedown', handleMouseDown);
	table.addEventListener('mouseleave', handleMouseLeave);
	console.log('selection started');
});

document.addEventListener('copy', ev => {
	let rows = [];
	Array.prototype.slice.call(document.getElementsByTagName('TABLE')).forEach(table => {
		rows = rows.concat(table[getSelectedData]());
	});
	if (rows.length > 0) {
		for (let i = 0; i < rows.length; i++) {
			rows[i] = rows[i].join(STR.TAB);
		}
		(async (in_text) => {
			await navigator.clipboard.writeText(in_text);
		})(rows.join(STR.LF));
		ev.preventDefault();
	}
});

})();
