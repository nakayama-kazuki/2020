(function(w, d) {

const DATTR = {
	N : 'selection',
	V : 'disabled'
};

if (d.styleSheets.length === 0) {
	document.getElementsByTagName('SCRIPT').item(0).parentNode.appendChild(document.createElement('STYLE'));
}

let sp = String.fromCharCode(32);
let attrsel = '[data-' + DATTR.N + '="' + DATTR.V + '"]';
let style =
	'TH' +
	attrsel +
	'::selection, ' +
	'TH' +
	attrsel +
	sp + '*::selection, ' +
	'TD' +
	attrsel +
	'::selection, ' +
	'TD' +
	attrsel +
	sp + '*::selection ' +
	'{background-color: transparent !important;}';
d.styleSheets[0].insertRule(style);

async function copyToClipboard(text)
{
	await navigator.clipboard.writeText(text);
}

function funcNodeIsElem(...in_nodeNames)
{
	return function(in_node) {
		if (in_node.nodeType === Node.ELEMENT_NODE) {
			for (let nodeName of in_nodeNames) {
				if (in_node.nodeName.toUpperCase() === nodeName) {
					return true;
				}
			}
		}
		return false;
	};
}

HTMLTableElement.prototype.startCustomSelect = function() {
	if (!this._exData) {
		this._exData = {};
		this._exData.debug = function(in_msg) {
			console.log(in_msg);
		};
		this._exData.handleMouseMove = (function(ev) {
			const right_button = 1;
			if (ev.buttons != right_button) {
				return;
			}
			if (!(funcNodeIsElem('TH', 'TD'))(ev.target)) {
				return;
			}
			if (ev.target.dataset[DATTR.N] === DATTR.V) {
				this._exData.debug('added target');
				delete ev.target.dataset[DATTR.N];
			}
		}).bind(this);
		this._exData.handleMouseLeave = (function(ev) {
			const right_button = 1;
			if (ev.buttons != right_button) {
				/* this is for ux */
				w.getSelection().getRangeAt(0).collapse();
			}
			Array.prototype.slice.call(this.querySelectorAll('TH, TD')).forEach(cell => {
				delete cell.dataset[DATTR.N];
			});
			this.removeEventListener('mousemove', this._exData.handleMouseMove);
			this.removeEventListener('mouseleave', this._exData.handleMouseLeave);
			this._exData.debug('stopped');
			this._exData.started = false;
		}).bind(this);
		this._exData.started = false;
	}
	if (!this._exData.started) {
		this.addEventListener('mousemove', this._exData.handleMouseMove);
		this.addEventListener('mouseleave', this._exData.handleMouseLeave);
	}
	/* all clear when restart */
	Array.prototype.slice.call(this.querySelectorAll('TH, TD')).forEach(cell => {
		cell.dataset[DATTR.N] = DATTR.V;
	});
	this._exData.debug('started');
	this._exData.started = true;
};

HTMLTableElement.prototype.getSelectedData = function() {
	let buff = [];
	if (!this._exData || !this._exData.started) {
		return buff;
	}
	let range = w.getSelection().getRangeAt(0);
	let s_cell = range.startContainer.parentElement.closest('TH, TD');
	let e_cell = range.endContainer.parentElement.closest('TH, TD');
	let inRange = false;
	Array.prototype.slice.call(this.querySelectorAll('TH, TD')).forEach(cell => {
		if (inRange) {
			if (cell.isEqualNode(e_cell)) {
				buff.push(e_cell.innerText.substring(0, range.endOffset));
				inRange = false;
			} else {
				if (cell.dataset[DATTR.N] !== DATTR.V) {
					buff.push(cell.innerText);
				}
			}
		} else {
			if (cell.isEqualNode(s_cell)) {
				buff.push(s_cell.innerText.substring(range.startOffset));
				inRange = true;
			}
		}
	});
	return buff;
};

d.addEventListener('selectstart', ev => {
	let cell = ev.composedPath().find(funcNodeIsElem('TH', 'TD'));
	if (cell) {
		cell.closest('TABLE').startCustomSelect();
	}
});

d.addEventListener('copy', ev => {
	let buff = [];
	Array.prototype.slice.call(d.getElementsByTagName('TABLE')).forEach(tbl => {
		buff = buff.concat(tbl.getSelectedData());
	});
	if (buff.length > 0) {
		copyToClipboard(buff.join("\n"));
	}
});

})(window, document);
