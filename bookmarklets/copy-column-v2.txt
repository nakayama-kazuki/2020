(function(w, d) {

const DATTR = {
	N : 'selection',
	V : 'disabled'
};

const CODE = (obj => {
	let ret = {};
	for (name in obj) {
		ret[name] = String.fromCharCode(obj[name]);
	}
	return ret;
})({
	TAB : 9,
	LF : 10,
	SP : 32
});

d.getElementsByTagName('*').item(0).appendChild(d.createElement('STYLE'));
let attrsel = '[data-' + DATTR.N + '="' + DATTR.V + '"]';
let style =
	'TH' + attrsel +
	'::selection,' +
	'TH' + attrsel + CODE.SP + '*' +
	'::selection,' +
	'TD' + attrsel +
	'::selection,' +
	'TD' + attrsel + CODE.SP + '*' +
	'::selection' +
	'{background-color: transparent !important;}';
d.styleSheets[d.styleSheets.length - 1].insertRule(style);

async function copyToClipboard(text)
{
	await navigator.clipboard.writeText(text);
}

function forceRedraw(in_elem)
{
	let stored = in_elem.style.opacity;
	in_elem.style.opacity = Number.parseFloat(w.getComputedStyle(in_elem).opacity) * 0.99;
	w.setTimeout(() => {
		in_elem.style.opacity = stored;
	}, 0);
}

function funcNodeIsElem(...in_nodeNames)
{
	return function(in_node) {
		if (in_node.nodeType === Node.ELEMENT_NODE) {
			for (let nodeName of in_nodeNames) {
				if (in_node.nodeName.toUpperCase() === nodeName) {
					return true;
				}
			}
		}
		return false;
	};
}

HTMLTableElement.prototype.startCustomSelect = function() {
	if (this.getElementsByTagName('TABLE').length > 0) {
		/* target is inner table */
		return;
	}
	if (!this._exData) {
		this._exData = {};
		this._exData.debug = function(in_msg) {
			console.log(in_msg);
		};
		this._exData.handleMouseMove = (function(ev) {
			const right_button = 1;
			if (ev.buttons != right_button) {
				return;
			}
			if (!(funcNodeIsElem('TH', 'TD'))(ev.target)) {
				return;
			}
			if (ev.target.dataset[DATTR.N] === DATTR.V) {
				this._exData.debug('added target');
				delete ev.target.dataset[DATTR.N];
			}
		}).bind(this);
		this._exData.handleMouseLeave = (function(ev) {
			const right_button = 1;
			if (ev.buttons != right_button) {
				/* for my favorite ux :-p */
				w.getSelection().getRangeAt(0).collapse();
			}
			Array.prototype.slice.call(this.querySelectorAll('TH, TD')).forEach(cell => {
				delete cell.dataset[DATTR.N];
			});
			if (w.navigator.userAgent.toLowerCase().indexOf('firefox') !== -1) {
				this._exData.debug('use trick for Firefox');
				forceRedraw(this);
			}
			this.removeEventListener('mousemove', this._exData.handleMouseMove);
			this.removeEventListener('mouseleave', this._exData.handleMouseLeave);
			this._exData.debug('stopped');
			this._exData.started = false;
		}).bind(this);
		this._exData.started = false;
	}
	if (!this._exData.started) {
		this.addEventListener('mousemove', this._exData.handleMouseMove);
		this.addEventListener('mouseleave', this._exData.handleMouseLeave);
	}
	/* all clear when restart */
	Array.prototype.slice.call(this.querySelectorAll('TH, TD')).forEach(cell => {
		cell.dataset[DATTR.N] = DATTR.V;
	});
	this._exData.debug('started');
	this._exData.started = true;
};

HTMLTableElement.prototype.getSelectedData = function() {
	let rows = [];
	if (!this._exData || !this._exData.started) {
		return rows;
	}
	let range = w.getSelection().getRangeAt(0);
	let s_cell = range.startContainer.parentElement.closest('TH, TD');
	let e_cell = range.endContainer.parentElement.closest('TH, TD');
	let _index = function(in_cell) {
		try {
			return [in_cell.parentNode.rowIndex, in_cell.cellIndex];
		} catch(err) {
			return [-1, -1];
		}
	};
	this._exData.debug('range : (' + _index(s_cell).join(',') + ') - (' + _index(e_cell).join(',') + ')');
	let _in_range = false;
	let _cur_rowIndex = -1;
	Array.prototype.slice.call(this.querySelectorAll('TH, TD')).forEach(cell => {
		let _new_rowIndex = cell.closest('TR').rowIndex;
		if (_new_rowIndex > _cur_rowIndex) {
			_cur_rowIndex = _new_rowIndex;
			rows[_cur_rowIndex] = [];
		}
		if (_in_range) {
			if (cell === e_cell) {
				rows[_cur_rowIndex].push(e_cell.innerText.substring(0, range.endOffset));
				_in_range = false;
			} else {
				if (cell.dataset[DATTR.N] !== DATTR.V) {
					rows[_cur_rowIndex].push(cell.innerText);
				}
			}
		} else {
			if (cell === s_cell) {
				rows[_cur_rowIndex].push(s_cell.innerText.substring(range.startOffset));
				_in_range = true;
			}
		}
	});
	/* remove empty */
	return rows.filter(row => {return row;});
};

d.addEventListener('selectstart', ev => {
	let table = ev.composedPath().find(funcNodeIsElem('TABLE'));
	if (table) {
		table.startCustomSelect();
	}
});

d.addEventListener('copy', ev => {
	let rows = [];
	Array.prototype.slice.call(d.getElementsByTagName('TABLE')).forEach(tbl => {
		rows = rows.concat(tbl.getSelectedData());
	});
	if (rows.length > 0) {
		for (let i = 0; i < rows.length; i++) {
			rows[i] = rows[i].join(CODE.TAB);
		}
		copyToClipboard(rows.join(CODE.LF));
	}
});

})(window, document);
